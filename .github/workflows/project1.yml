name: Project1/Project1
on:
  push:
    branches:
    - main
env:
  buildConfiguration: Release
  buildPlatform: Any CPU
  var_container_tfstate: fhmdbcon
  var_key: fhmdbkey
  var_location_tfstate: eastus
  var_resource_group_name_tfstate: db-RG
  var_service_connection: DemoConnection
  var_storage_account_tfstate: fhmdbstore
jobs:
  Build-Build:
    runs-on: windows-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3.5.0
    - uses: nuget/setup-nuget@v1.2.0
    - run: nuget restore ${{ env.solution }}
    # The following script preserves the globbing behavior of the CopyFiles task.
    # Refer to this transformer's documentation for an alternative that will work in simple cases.
    - uses: actions/github-script@v6.4.0
      env:
        TARGET_FOLDER: "${{ runner.temp }}"
        CONTENTS: "**.tf"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |-
          const fs = require('fs').promises
          const path = require('path')
          const target = path.resolve(process.env.TARGET_FOLDER)
          process.chdir(process.env.SOURCE_FOLDER || '.')
          if (process.env.CLEAN_TARGET_FOLDER === 'true') await io.rmRF(target)
          const flattenFolders = process.env.FLATTEN_FOLDERS === 'true'
          const options = {force: process.env.OVERWRITE === 'true'}
          const globber = await glob.create(process.env.CONTENTS || '**')
          for await (const file of globber.globGenerator()) {
            if ((await fs.lstat(file)).isDirectory()) continue
            const filename = flattenFolders ? path.basename(file) : file.substring(process.cwd().length)
            const dest = path.join(target, filename)
            await io.mkdirP(path.dirname(dest))
            await io.cp(file, dest, options)
          }
    - uses: actions/upload-artifact@v3.1.1
      with:
        name: drop
        path: "${{ runner.temp }}"
  Deploy_Terraform_Script-Deploy:
    needs:
    - Build-Build
    runs-on: windows-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3.5.0
    - uses: actions/download-artifact@v3.0.1
      with:
        name: drop
        path: "${{ github.workspace }}"
#     # This item has no matching transformer
#     - task: replacetokens@5
#       inputs:
#         targetFiles: "**/*.tf"
#         encoding: auto
#         tokenPattern: rm
#         writeBOM: true
#         actionOnMissing: warn
#         keepToken: false
#         actionOnNoFiles: continue
#         enableTransforms: false
#         useLegacyPattern: false
#         enableTelemetry: true
    - uses: azure/login@v1.4.6
      with:
        creds: "${{ secrets.AZURE_CREDENTIALS }}"
    - run: |-
        $ErrorActionPreference = 'stop'
        # this will create Azure resource group
        az group create --location ${{ env.var_location_tfstate }} --name ${{ env.var_resource_group_name_tfstate }}
        az storage account create --name ${{ env.var_storage_account_tfstate }} --resource-group ${{ env.var_resource_group_name_tfstate }} --location ${{ env.var_location_tfstate }} --sku Standard_LRS
        az storage container create --name ${{ env.var_container_tfstate }} --account-name ${{ env.var_storage_account_tfstate }}
        az storage account keys list -g ${{ env.var_resource_group_name_tfstate }} -n ${{ env.var_storage_account_tfstate }}
        if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) { exit $LASTEXITCODE }
      shell: powershell
    - uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: latest
#     # This item has no matching transformer
#     - task: TerraformTaskV2@2
#       displayName: Terraform_Init
#       inputs:
#         provider: azurerm
#         command: init
#         workingDirectory: "${{ github.workspace }}/drop"
#         backendServiceArm: "${{ env.var_service_connection }}"
#         backendAzureRmResourceGroupName: "${{ env.var_resource_group_name_tfstate }}"
#         backendAzureRmStorageAccountName: "${{ env.var_storage_account_tfstate }}"
#         backendAzureRmContainerName: "${{ env.var_container_tfstate }}"
#         backendAzureRmKey: "${{ env.var_key }}"
#     # This item has no matching transformer
#     - task: TerraformTaskV2@2
#       displayName: Terraform_Plan
#       inputs:
#         provider: azurerm
#         command: plan
#         workingDirectory: "${{ github.workspace }}/drop"
#         environmentServiceNameAzureRM: "${{ env.var_service_connection }}"
#     # This item has no matching transformer
#     - task: TerraformTaskV2@2
#       displayName: Terraform_Apply
#       inputs:
#         provider: azurerm
#         command: apply
#         workingDirectory: "${{ github.workspace }}/drop"
#         environmentServiceNameAzureRM: "${{ env.var_service_connection }}"
